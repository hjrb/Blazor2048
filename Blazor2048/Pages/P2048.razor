@page "/2048"
@using Blazor2048
@using Microsoft.AspNetCore.Components.Web
@using Blazor.IndexedDB.Framework
@*@inject StateContainer state;*@
@inject IIndexedDbFactory DbFactory
@inject IJSRuntime jsRuntime
@inject StateContainer state;

<div class="container">
    <div class="row pb-2">
        <div class="col-12">
            <h2>Let's Play 2048!</h2>
        </div>
    </div>
    <div class="row pb-2">
        <div class="col">
            <input type="button" class="btn btn-success btn-block btn-lg" @onclick="NewGame" value="New Game" />
        </div>
        <div class="col">
            <div class="form-check form-switch-lg form-switch-xl">
                <input @bind="showButtons"
                       class="form-check-input"
                       type="checkbox"
                       id="checkBoxShowButtons" />
                <label class="form-check-label" for="checkBoxShowButtons">
                    Show Buttons
                </label>
            </div>
        </div>
    </div>
    <div class="row pb-2">
        <div class="col">
            @*the board*@
            <table class="table gametable">
                @for (int row = 0; row < game.Size; ++row)
                {
                    <tr>
                        @for (int col = 0; col < game.Size; ++col)
                        {
                            <td class="gamecell" data-value="@(game[row,col])" data-added="@((game.Size*row+col)==game.LastAddedCellIndex ? "true" : "false")">
                                @*data-value will be referenced by css for styling*@
                                <div class="gamecellcontent">@CellText(row, col)</div>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
        @*the buttons to control the game with the mouse / touch*@
        @if (showButtons)
        {
            <div class="col">
                <table class="table">
                    <tr>
                        <td colspan="3"><button class="btn btn-primary btn-block" @onclick="HandleUp"><span style="color:darkblue" class="oi oi-arrow-top"></span> Up  </button></td>
                    </tr>
                    <tr>
                        <td><button class="btn btn-primary btn-block" @onclick="HandleLeft"><span style="color:darkblue" class="oi oi-arrow-left"></span> Left</button></td>
                        <td></td>
                        <td><button class="btn btn-primary btn-block" @onclick="HandleRight">Right <span style="color:darkblue" class="oi oi-arrow-right"></span></button></td>
                    </tr>
                    <tr>
                        <td colspan="3"><button class="btn btn-primary btn-block" @onclick="HandleDown"><span style="color:darkblue" class="oi oi-arrow-bottom"></span> Down</button></td>
                    </tr>
                </table>
            </div>
        }
    </div>
    <br>
    <div class="row pb-2">
        <div class="col-offset-2 col-8">
            <table class="table table-bordered table-dark table-hover table-striped">
                <thead>
                    <tr>
                        <th class="scoreth">Move</th>
                        <th class="scoreth">Status</th>
                        <th class="scoreth">Max Value</th>
                        <th class="scoreth">Total Value</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="scordtd">@game.MovesCounter</td>
                        <td class="scordtd">
                            @(game.Max>=2048 ? "Your are a Winner!!" : "Keep playing...")
                        </td>
                        <td class="scordtd">@game.Max</td>
                        <td class="scordtd">@game.Total</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// reference to the current page
    /// </summary>
    static P2048? page=null;

    // see https://docs.microsoft.com/de-de/aspnet/core/blazor/call-dotnet-from-javascript?view=aspnetcore-5.0
    /// <summary>
    /// this method is static an hence callable per assembly. this allows static access from a JS Interop call
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    [JSInvokable("HandleKeyPress")]
    public static async Task HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e?.Code)
        {
            case "ArrowUp": page?.Up(); break;
            case "ArrowDown": page?.Down(); break;
            case "ArrowLeft": page?.Left(); break;
            case "ArrowRight": page?.Right(); break;
            default: break;
        }
        await Task.CompletedTask;
    }

    /// <summary>
    /// if true the buttons to control the game using mouse will be shown
    /// </summary>
    bool showButtons = false;

    /// <summary>
    /// the game
    /// </summary>
    Game2048 game = new Game2048();

    string CellText(int row, int col)
    {

        var val = game[row, col];
        return val == 0 ? string.Empty : val.ToString();
    }

    /// <summary>
    /// create a new game
    /// </summary>
    /// <returns></returns>
    public void NewGame()
    {
        this.game = new Game2048();
        await SaveCurrentGameToIndexDB();
    }

    /// <summary>
    /// perform a move
    /// </summary>
    /// <param name="move"></param>
    /// <returns></returns>
    private void PerformMove(Func<bool> move)
    {
        // call the move...
        if (move())
        {
            // save the game
            state.Game = game;
            // some cell has changed
            this.StateHasChanged();
        }
    }

    /// <summary>
    /// movments handlers
    /// </summary>
    /// <returns></returns>
    public void Up() =>  PerformMove(() => game.Up());
    public void Down() => PerformMove(() => game.Down());
    public void Left() => PerformMove(() => game.Left());
    public void Right() => PerformMove(() => game.Right());

    private void HandleUp(MouseEventArgs e) => this.Up();
    private void HandleDown(MouseEventArgs e) => this.Down();
    private void HandleLeft(MouseEventArgs e) => this.Left();
    private void HandleRight(MouseEventArgs e) => this.Right();

    protected override async void OnInitialized()
    {
        // set the static reference to the current page to this
        page = this;
        try
        {
            var storedGame = db.Games.FirstOrDefault();
            if (storedGame != null)
            {
                var cellValues = storedGame.CellValues;
                game.Cells = cellValues.Split(',').Select(x => int.Parse(x)).ToArray();
            }
            else
            {
                game = new Game2048();
            }
        }
        catch (Exception)
        {
            // play a new game
        }
        // singnal that the state has changed
        this.StateHasChanged();
    }
}

