@page "/Play"
@using Blazor2048
@using Microsoft.AspNetCore.Components.Web
@*using local storage for WASM*@
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime jsRuntime;


@* make it focusable, prevent touch event handling, get a reference element ,register a handler for the key-up event  *@
<div class="container">
    <div class="row pb-2 @welcomeButon">
        <div class="col">
            <p>
                <button class="btn btn-link link-info" type="button" @onclick="@(e=>infopanelvisible=string.IsNullOrEmpty(infopanelvisible) ? "collapse" : string.Empty)">
                    <div class="d-flex justify-content-start mb-3 align-content-center">
                        <h3>Let's play 2048 - click here to see instructions</h3>
                        <button class="btn btn-close btn-inline m-2" @onclick="@(e=>welcomeButon="collapse")"></button>
                    </div>
                </button>
            </p>
            <div class="@infopanelvisible" id="infopanel">
                <div class="card card-body">
                    <ul>
                        <li>
                            The object is to create a cell with the value 2048 (or higher) by moving the boad causing cells with same value to join.
                        </li>
                        <li>
                            How to perform a move?
                            <ul>
                                <li>If you have a keyboard (PC, Mac) simply use the keyboard buttons LEFT, RIGHT, UP and DOWN, to perform a move.</li>
                                <li>On touch enabled device (phone, table) you can swipe LEFT, RIGHT, UP and DOWN .</li>
                                <li>You can always check the option "Button". This will display buttons for LEFT, RIGHT, UP, DOWN you can either touch click with the mouse.</li>
                            </ul>
                            <NavLink href="" Match="NavLinkMatch.All">
                                <span class="oi oi-info" aria-hidden="true"></span> Click here for more details...
                            </NavLink>
                            <a href="/Index"></a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="row pb-2">
        <div class="col notouch nofocusframe"
             tabindex="0"
             @ref="divContainer"
             @onkeyup="@KeyUp">


            @*the game board*@
            <table id="tableGame" class="table gametable" @ontouchstart="TouchStart" @ontouchend="TouchEnd" @ontouchstart:preventDefault="true" @ontouchend:preventDefault="true">
                @for (int row = 0; row < game.Size; ++row)
                {
                    <tr>
                        @for (int col = 0; col < game.Size; ++col)
                        {
                            <td class="gamecell" data-value="@(game[row,col])" data-added="@((game.Size*row+col)==game.LastAddedCellIndex ? "true" : "false")">
                                @*data-value will be referenced by css for styling*@
                                <div class="gamecellcontent">@CellText(row, col)</div>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
        @*the buttons to control the game with the mouse / touch*@
        @if (showButtons)
        {
            <div class="col">
                <div class="d-flex justify-content-center  mb-3">
                    <button type="button" class="btn btn-primary btn-lg controlbutton" @onclick="HandleUp">
                        <span style="color:darkblue" class="oi oi-arrow-top m-1"></span>Up
                    </button>
                </div>
                <div class="d-flex justify-content-between   mb-3">
                    <button type="button" class="btn btn-primary btn-lg controlbutton " @onclick="HandleLeft">
                        <span style="color:darkblue" class="oi oi-arrow-left m-1"></span>Left
                    </button>
                    <button type="button" class="btn btn-primary btn-lg controlbutton" @onclick="HandleRight">
                        Right<span style="color:darkblue" class="oi oi-arrow-right m-1"></span>
                    </button>
                </div>

                <div class="d-flex justify-content-center  mb-3">
                    <button type="button" class="btn btn-primary btn-lg controlbutton" @onclick="HandleDown">
                        Down<span style="color:darkblue" class="oi oi-arrow-bottom m-1"></span>
                    </button>
                </div>
            </div>
        }
    </div>

    @*Status Indicator*@
    <div class="row pb-2">
        <div class="col">
            <table class="table table-hover table-info">
                <thead>
                    <tr>
                        <th class="scoreth">Move</th>
                        <th class="scoreth">Status</th>
                        <th class="scoreth">Max</th>
                        <th class="scoreth">Sum</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="scordtd">@game.MovesCounter</td>
                        <td class="scordtd">
                            <text>
                                <span class="@gamestatusiconclass"></span><span>@gamestatustext</span>
                            </text>
                        </td>
                        <td class="scordtd">@game.Max</td>
                        <td class="scordtd">@game.Total</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row pb-2">
        <div class="col">
            <input type="button" class="btn btn-outline-primary btn-block" @onclick="NewGame" value="New Game" />
        </div>
        <div class="col">

            <div class="form-check form-switch form-switch-xl d-flex align-items-center">
                <input class="form-check-input" type="checkbox" id="checkBoxShowButtons" @bind="showButtons">
                <label class="form-check-label" for="checkBoxShowButtons">Buttons</label>
            </div>

        </div>
    </div>

</div>

@code {
    /// <summary>
    /// reference to the current page
    /// </summary>
    // static P2048? page = null;
    // see https://docs.microsoft.com/de-de/aspnet/core/blazor/call-dotnet-from-javascript?view=aspnetcore-5.0
    /// <summary>
    /// this method is static an hence callable per assembly. this allows static access from a JS Interop call
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    //[JSInvokable("HandleKeyPress")]
    //public static async Task HandleKeyPress(KeyboardEventArgs e)
    //{
    //    if (e == null || page == null) return;
    //    try
    //    {
    //        switch (e?.Code)
    //        {
    //            case "ArrowUp": await page.Up(); break;
    //            case "ArrowDown": await page.Down(); break;
    //            case "ArrowLeft": await page.Left(); break;
    //            case "ArrowRight": await page.Right(); break;
    //            default: break;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        Console.WriteLine(ex);
    //    }


    string infopanelvisible = "collapse";
    string welcomeButon = string.Empty;
    protected ElementReference divContainer;
    protected async void KeyUp(KeyboardEventArgs e)
    {
        if (e == null) return;
        try
        {
            switch (e.Code)
            {
                case "ArrowUp": await Up(); break;
                case "ArrowDown": await Down(); break;
                case "ArrowLeft": await Left(); break;
                case "ArrowRight": await Right(); break;
                default: break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }



    /// <summary>
    /// if true the buttons to control the game using mouse will be shown
    /// </summary>
    bool showButtons = false;
    /// <summary>
    /// displays the game status
    /// </summary>
    string gamestatustext = "Keep playing";
    /// the CSS class name representing the status
    string gamestatusiconclass = "";

    /// <summary>
    /// the game
    /// </summary>
    Game2048 game = new Game2048();
    /// <summary>
    /// tuple for the data of a toucht event start
    /// </summary>
    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    /// <summary>
    /// handle touch start
    /// </summary>
    /// <param name="t"></param>
    void TouchStart(TouchEventArgs t)
    {
        startPoint.ReferencePoint = t.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
    }

    /// <summary>
    /// handle touche end
    /// </summary>
    /// <param name="t"></param>
    async void TouchEnd(TouchEventArgs t)
    {

        try
        {
            if (startPoint.ReferencePoint == null)
            {
                return; // that should never happen
            }

            var endReferencePoint = t.ChangedTouches[0];
            var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - startPoint.StartTime;
            var b = false;
            const int minSwipDiff = 10; // at least 10 pixels
                                        // check if swipe was more horizontal vs. vertical
            if (Math.Abs(diffX) > Math.Abs(diffY))
            {
                if (Math.Abs(diffX) > minSwipDiff)
                {
                    b = diffX < 0 ? game.Right() : game.Left();
                }
            }
            else
            {
                if (Math.Abs(diffY) > minSwipDiff)
                {
                    b = diffY < 0 ? game.Down() : game.Up();
                }
            }
            if (b)
            {
                await SaveCurrentGame();
                EvaluateStatus();
                this.StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // don't let the error out of the event handler
            Console.WriteLine(ex);
        }
    }



    string CellText(int row, int col)
    {

        var val = game[row, col];
        return val == 0 ? string.Empty : val.ToString();
    }

    /// <summary>
    /// create a new game
    /// </summary>
    /// <returns></returns>
    public async Task NewGame()
    {
        this.game = new Game2048();
        EvaluateStatus();
        await SaveCurrentGame();
    }

    public void EvaluateStatus()
    {
        var done = game.Done();
        (gamestatustext, gamestatusiconclass) =
            game.Won() ?
            ("Congratulations - your are a Winner!!", "icon-won")
            : (
                game.Done() ?
                ("Sorry. Try again. Play a New Game", "icon-done")
                : ("Keep playing...", "icon-keepplaying")
              );
    }

    public async Task SaveCurrentGame()
    {
        try
        {
            //var cellValues = string.Join(',', this.game.Cells);
            // TODO: save the current move as well.
            await localStorage.SetItemAsync<Game2048>("Game", this.game);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    /// <summary>
    /// perform a move
    /// </summary>
    /// <param name="move"></param>
    /// <returns></returns>
    private async Task PerformMove(Func<bool> move)
    {
        // call the move...
        if (move())
        {
            await SaveCurrentGame();

        }
        EvaluateStatus();
        this.StateHasChanged();
    }

    /// <summary>
    /// movments handlers
    /// </summary>
    /// <returns></returns>
    public async Task Up() => await PerformMove(() => game.Up());
    public async Task Down() => await PerformMove(() => game.Down());
    public async Task Left() => await PerformMove(() => game.Left());
    public async Task Right() => await PerformMove(() => game.Right());

    private async Task HandleUp(MouseEventArgs e) => await this.Up();
    private async Task HandleDown(MouseEventArgs e) => await this.Down();
    private async Task HandleLeft(MouseEventArgs e) => await this.Left();
    private async Task HandleRight(MouseEventArgs e) => await this.Right();

    protected override async void OnInitialized()
    {
        // set the static reference to the current page to this
        //page = this;
        try
        {
            // this.game.Cells = cellValues.Split(',').Select(x => int.Parse(x)).ToArray();
            var savedGame = await localStorage.GetItemAsync<Game2048>("Game");
            if (savedGame != null)
            {
                this.game = savedGame;
            }
        }
        catch (Exception)
        {
            // play a new game
        }
        EvaluateStatus();
        await SaveCurrentGame();
        // singnal that the state has changed
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("SetFocusToElement", divContainer);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}

